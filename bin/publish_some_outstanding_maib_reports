#!/usr/bin/env ruby

require File.expand_path("../../config/environment", __FILE__)
require "specialist_publisher"

# IDs of MAIB reports we need to publish
ids_to_publish = %w(
  75d81690-c333-4e9b-a9c8-69fedb8d6296
  6da39644-1bcd-412d-9992-9bbe1b4e0cb9
  7dd1cdf0-3ed1-4d5c-a00e-90726a32c300
  8c7ad08a-8284-4bfe-893d-b916924cb9cc
  8009c9e8-3ca0-407f-89fe-d338046d5618
  36f1a2d3-f6d5-4597-a8b2-1321688bfb3d
  8ae30ad4-54ce-4ff4-b3ab-56df9a2eb2bf
  02e33a64-2441-4073-8a2b-d46417892ece
  0f0afd0c-79a4-47f3-bc54-0c02199f8d34
  b71e8e3e-9f41-4a16-8771-7e677e990ef4
  8b1ac0dd-2419-419b-bc74-f608af4be41b
  69aea5f4-3c51-4383-980f-d56d7633dfe0
)

# The first editions of all published MAIB reports
def published_editions
  SpecialistDocumentEdition.where(
    document_type: "maib_report",
    version_number: 1,
    :state.ne => "draft",
  )
end

def public_updated_at_timestamp_for_edition(edition)
  # Split the published editions into two groups: those about incidents before
  # the one in the current edition, and those about incidents after the one in
  # the current edition.
  before, after = published_editions.partition { |other|
    other.extra_fields.fetch("date_of_occurrence") < edition.extra_fields.fetch("date_of_occurrence")
  }

  # Get the most recent publication timestamp from those editions about
  # incidents before the one in the current edition. The current edition will
  # need to be given a publication timestamp after this time.
  last_public_updated_at_before = before.map(&:public_updated_at).max

  # Get the earliest publication timestamp from those editions about incidents
  # after the one in the current edition. The current edition will need to be
  # given a publication timestamp before this time.
  first_public_updated_at_after = after.map(&:public_updated_at).min

  # Pick a time after `last_public_updated_at_before`
  public_updated_at = last_public_updated_at_before + 1.second

  # Check that the time is before `first_public_updated_at_after`
  if public_updated_at < first_public_updated_at_after
    public_updated_at
  else
    nil
  end
end

def publish_edition(edition, public_updated_at:)
  repo = SpecialistPublisherWiring.get(:repository_registry).for_type("maib_report")
  builder = SpecialistPublisherWiring.get(:maib_report_builder)
  observers = MaibReportObserversRegistry.new.republication

  public_updated_at_setter = Proc.new { |document|
    document.latest_edition.public_updated_at = public_updated_at
  }

  service = PublishDocumentService.new(
    repo,
    [public_updated_at_setter] + observers,
    edition.document_id,
    true,
  )

  service.call
end

ids_to_publish.each do |id|
  edition = SpecialistDocumentEdition.where(document_id: id).first
  public_updated_at = public_updated_at_timestamp_for_edition(edition)

  if public_updated_at.nil?
    puts "Skipping #{edition.document_id} (#{edition.slug}): could not find suitable public_updated_at timestamp"
  else
    puts "Publishing #{edition.document_id} (#{edition.slug}) with public_updated_at timestamp #{public_updated_at}"
    publish_edition(edition, public_updated_at: public_updated_at)
  end
end
