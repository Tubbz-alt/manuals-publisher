#!/usr/bin/env ruby

require File.expand_path("../../config/environment", __FILE__)
require "specialist_publisher"

def usage
  $stderr.puts %Q{
USAGE: #{File.basename(__FILE__)} (format ...)(document_id) (date)

1. available formats:

  #{SpecialistPublisher.document_types.sort.join("\n  ")}

2. document_id:
  To find document_id, login to specialist-publisher in production, go to document page and copy document_id from url.

3. date:
  Format: yyyy/mm/dd or to specify publishing time: yyyy/mm/dd hh:mm
  }

  exit(1)
end

usage unless ARGV.any?
document_type = ARGV[0]
document_id = ARGV[1]

begin
  date = DateTime.parse(ARGV[2])
rescue ArgumentError
  puts "date format invalid, format should be: yyyy/mm/dd or to specify publishing time: yyyy/mm/dd hh:mm"
  usage
end

unless SpecialistPublisher.document_types.include?(document_type)
  raise ArgumentError, "please select document type among available formats provided:\n\n  #{SpecialistPublisher.document_types.sort.join("\n  ")}"
end
unless document_id.length > 30 && document_id.length < 40
  raise ArgumentError, "document_id invalid"
end

repository = SpecialistPublisherWiring.get(:repository_registry).for_type(document_type.to_sym)
document = repository.fetch(document_id)
unless document.published?
  raise "This document isn't published, so I am refusing to change the public_updated_at and publish it in case it shouldn't be published."
end
document.update(public_updated_at: date)
# Directly set the state of the current edition as published, instead of using
# the publish service. We do it this way because we don't want to trigger email
# alerts. We still need to send the change to other systems though, hence we
# use the republish service later on.
#
# Note: this will publish any other unpublished changes if there is already a
# draft, but won't trigger email alerts, even if there should be some.
document.publish!
repository.store(document)

SpecialistPublisher.document_services(document_type).republish(document_id).call

puts "#{document_type} item timestamp updated to #{date}."
