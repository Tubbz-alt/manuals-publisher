#!/usr/bin/env ruby

require File.expand_path('../../config/environment', __FILE__)

abort("Usage: bin/cma_importer content_directory") if ARGV.empty? || !File.directory?(ARGV.first)

require 'pathname'
content_directory = Pathname.new(ARGV.first)

class ImportedSpecialistDocumentPresenter
  attr_reader :case_data

  def initialize(case_data)
    @case_data = case_data
  end

  def to_hash
    {
      title: case_data['title'],
      summary: (case_data['summary'] || case_data['title']),
      body: body,
      case_type: case_data['case_type'],
      case_state: case_data['case_state'],
      market_sector: (case_data['sector'] || 'MISSING MARKET SECTOR'),
      state: 'draft',
      version_number: 1,
      opened_date: Date.parse(case_data['opened_date'] || '01-01-1970')
    }
  end

  def body
    if case_data.has_key?('body')
      case_data.fetch('body')
    else
      [
        decision_body,
        initial_undertakings_body,
        invitation_to_comment_body
      ].compact.join("\n\n")
    end
  end

  def decision_body
    if case_data.has_key?('decision')
      "# Decision\n\n#{case_data['decision']}\n\n"
    end
  end

  def initial_undertakings_body
    if case_data.has_key?('initial_undertakings')
      "# Initial undertakings\n\n#{case_data['initial_undertakings']}\n\n"
    end
  end

  def invitation_to_comment_body
    if case_data.has_key?('invitation_to_comment')
      "# Invitation to comment\n\n#{case_data['invitation_to_comment']}\n\n"
    end
  end
end

Pathname.glob("#{content_directory}/*.json").each do |case_file|
  puts "Processing #{case_file}"
  case_data = JSON.parse(case_file.read)

  case_data.each do |k, v|
    case_data.delete(k) if v.blank?
  end

  case_data['original_urls'] ||= Array(case_data.delete('original_url'))

  [
    'title',
    'original_urls',
    'case_type',
    'case_state'
  ].each do |required_field|
    unless case_data.has_key?(required_field)
      puts "Skipping case_file as it is missing at least #{required_field}"
      next
    end
  end

  builder = SpecialistPublisherWiring.get(:specialist_document_builder)
  document = builder.call(ImportedSpecialistDocumentPresenter.new(case_data).to_hash)

  repository = SpecialistPublisherWiring.get(:specialist_document_repository)
  unless repository.store!(document)
    raise "Failed to store document, #{document.errors}"
  end

  mapping = SpecialistPublisherWiring.get(:panopticon_mappings).where(document_id: document.id).last
  mapping.update_attribute(:original_urls, case_data['original_urls'])

  Array(case_data['assets']).each do |asset_data|
    basename = asset_data['filename'].split('/').last
    puts "-- Adding asset #{basename}"

    file = File.open(content_directory + asset_data['filename'])
    uploaded_file = ActionDispatch::Http::UploadedFile.new(
      tempfile: file,
      filename: basename,
      type: asset_data['content_type']
    )

    document.add_attachment(
      file: uploaded_file,
      filename: basename,
      title: basename,
      original_url: asset_data['original_url']
    )

    if repository.store!(document)
      puts "-- OK"
    else
      puts "-- FAILED to store because #{document.errors.full_messages.to_sentence}"
    end

    file.close
  end
end
